#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""A dnstwist and/or URLCrazy wrapper for emailing security staff when possible typo sqatting/spear
phishing domains have been registered"""

from time import sleep
from configparser import ConfigParser
from argparse import ArgumentParser
from os import path, getcwd
from subprocess import check_output, PIPE, CalledProcessError
from sys import stderr
from io import StringIO
from csv import DictReader, DictWriter
from smtplib import SMTP
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from email.mime.text import MIMEText
from email.utils import COMMASPACE

from requests import get

__author__ = 'Sean Whalen'
__version__ = '1.2.0'


def dt_whois(domain, **kwargs):
    """Returns WHOIS data from DomainTools"""
    user_agent = "domainaware/{}".format(__version__)
    headers = {"User-Agent": user_agent}
    params = dict(api_username=kwargs["api_username"], api_key=kwargs["api_key"])
    url = "https://api.domaintools.com/v1/{}/whois".format(domain)
    if kwargs["parsed_whois"].lower() == "true":
        url += "/parsed"
    response = get(url, headers=headers, params=params)
    if response.status_code == 403:
        raise RuntimeError("DomainTools authentication failed")
    parsed_response = response.json()
    if "error" in parsed_response:
        error = parsed_response['error']['message']
        print("Warning: DomainTools error for domain {}: {}".format(domain, error), file=stderr)
        return dict()
    return response.json()["response"]


def get_row_domain(row):
    """Used as the key for sorting CSV rows by domain"""
    return row['Domain']


def convert_country(name):
    """Converts a country name from urlcrazy format to dnstwist format"""
    words = name.split(" ")
    for i in range(len(words)):
        words[i] = words[i].lower().title()
    name = " ".join(words)

    return name


def crazy_twist(crazy_row):
    """Converts a urlcrazy row to dnstwist format"""
    fuzzer_map = {
        "Character Omission": "Omission",
        "Character Repeat": "Repetition",
        "Character Swap": "Transposition",
        "Character Replacement": "Replacement",
        "Character Insertion": "Insertion",
        "Common Misspelling": "Misspelling",
        "Bit Flipping": "Bitsquatting",
        "Homoglyphs": "Homoglyph",
        "Wrong SLD": "Subdomain"
    }

    fuzzer = crazy_row["Typo Type"]
    if fuzzer in fuzzer_map:
        fuzzer = fuzzer_map[fuzzer]

    twist_row = {
        "Fuzzer": fuzzer,
        "Domain": crazy_row["Typo"],
        "A": crazy_row["DNS-A"],
        "MX": crazy_row["DNS-MX"]
    }

    if crazy_row['Country-A']:
        twist_row['Country'] = convert_country(crazy_row["Country-A"])

    # Sometimes the URLCrazy MX row is actually the TLD row :\
    if twist_row["MX"] == twist_row["Domain"].split(".")[-1] \
    or twist_row["MX"] == twist_row["Domain"].split(".",1)[-1] \
    or twist_row["MX"] == twist_row["Domain"].split(".",2)[-1]:
        twist_row["MX"] = ''

    # Sometimes the URLCrazy Country-A row is actually the MX row... This should really be fixed in URLcrazy...
    if crazy_row["CC-A"] == '' and "." in crazy_row["Country-A"]:
        twist_row["MX"] = crazy_row["Country-A"],
        twist_row["Country"] = ''

    return twist_row


def twist_query(dnstwist_path, domain):
    """Query dnstwist"""
    rows = []
    dt_args = [dnstwist_path, '-grc', domain]
    output = check_output(dt_args, universal_newlines=True, stderr=PIPE)
    dnstwist_csv = DictReader(StringIO(str(output)))
    try:
        # Skip first row; it contains original domain
        next(dnstwist_csv)
    except StopIteration:
        # Exception raised if there are no rows after the header; no domains
        return []
    for row in dnstwist_csv:
        standard_row = dict(Fuzzer=row["fuzzer"],
                            Domain=row["domain-name"],
                            A=row["dns-a"],
                            AAAA=row["dns-aaaa"],
                            MX=row["dns-mx"],
                            NS=row["dns-ns"],
                            Country=row["geoip-country"]
                            )
        rows.append(standard_row)

    return rows


def crazy_query(urlcrazy_path, domain, attempt=1):
    """Query URLCrazy"""
    max_attempts = 4
    rows = []
    dt_args = [urlcrazy_path, '-f', 'csv', domain]
    try:
        output = check_output(dt_args, universal_newlines=True, stderr=PIPE)
        output = str(output)
        output = output.replace('\0', '')
        # URLCrazy frequently returns bad output, so keep trying :\
    except (UnicodeDecodeError, ProcessLookupError, ChildProcessError):
        attempt += 1
        if attempt > max_attempts:
            print("Warning: Failed to parse URLCrazy output for {}".format(domain), file=stderr)
            return []
        return crazy_query(urlcrazy_path, domain, attempt)
    except CalledProcessError:
        # Sometimes URLCrazy considers valid domains invalid and exits with 1
        print("Warning: URLCrazy does not recognize {} as a valid domain".format(domain), file=stderr)
        return []
    urlcrazy_csv = DictReader(StringIO(output, newline=''))
    for row in urlcrazy_csv:
        rows.append(crazy_twist(row))

    return rows


def add_dt(rows, **kwargs):
    """Add WHOIS information from DomainTools to the CSV rows"""
    for row in rows:
        whois = dt_whois(row['Domain'], **kwargs)
        if 'registrant' in whois:
            row["Registrant"] = whois["registrant"]
        if 'registration' in whois:
            if 'registrar' in whois['registration']:
                row["Registrar"] = whois['registration']["registrar"]
            if 'created' in whois['registration']:
                row["Created"] = whois['registration']["created"]
            if 'updated' in whois['registration']:
                row["Updated"] = whois['registration']["updated"]
            if 'expires' in whois['registration']:
                row["Expires"] = whois['registration']["expires"]
        sleep(1)

    return rows


def find_new_domains(tool_paths, my_domains_path, known_domains_path, **kwargs):
    """"Returns suspicious domain information as a list of dictionaries"""
    known_domains = set()
    rows = []
    with open(known_domains_path, 'r') as known_domains_file:
        known_domains_csv = DictReader(known_domains_file)
        for row in known_domains_csv:
            known_domains.add(row["Domain"])

    with open(my_domains_path, 'rU') as my_domains:
        for my_domain in my_domains:
            my_domain = my_domain.strip().lower()
            known_domains.add(my_domain)

            if tool_paths["dnstwist"]:
                for row in twist_query(tool_paths["dnstwist"], my_domain):
                    if row['Domain'] not in known_domains:
                        rows.append(row)
                        known_domains.add(row['Domain'])

            if tool_paths["urlcrazy"]:
                for row in crazy_query(tool_paths["urlcrazy"], my_domain):
                    if row["A"] == '' and row["MX"] == '':
                        continue
                    if row['Domain'] not in known_domains:
                        rows.append(row)
                        known_domains.add(row['Domain'])

    if kwargs["api_username"] and kwargs["api_key"]:
        rows = add_dt(rows, **kwargs)

    return sorted(rows, key=get_row_domain)


def generate_output(results, config_directory, output_path):
    """"Writes output files"""
    lines = []
    # write out results
    # this file will only contain the header if there are no new results
    with open(output_path, 'w') as outfile:
        fieldnames = ['Fuzzer', 'Domain', 'Registrant', 'Registrar', 'Created', 'Updated', 'Expires',
                      'A', 'AAAA', 'MX', 'NS', 'Country']
        writer = DictWriter(outfile, fieldnames=fieldnames)
        writer.writeheader()
        for row in results:
            lines.append(row['Domain'])
            writer.writerow(row)

    with open(path.join(config_directory, "last_domains"), "w") as last_domains_file:
        last_domains_file.write("\n".join(lines))


def send_mail(**kwargs):
    """Sends an email message"""
    msg = MIMEMultipart()
    msg["From"] = kwargs["from"]
    msg["To"] = kwargs['to']
    msg["Subject"] = kwargs["subject"]

    msg.attach(MIMEText(kwargs['body']))

    if "files" in kwargs:
        files = kwargs['files']
    else:
        files = None

    for f in files or []:
        with open(f, "rb") as fil:
            msg.attach(MIMEApplication(
                fil.read(),
                Content_Disposition='attachment; filename="{}"'.format(path.basename(f)),
                Name=path.basename(f)
            ))

    mail_server = SMTP(kwargs["host"], kwargs["port"])
    mail_server.ehlo()
    try:
        mail_server.starttls()
    except:
        pass  # Try STARTTLS, but continue if it fails
    mail_server.ehlo()
    if kwargs["username"]:
        mail_server.login(kwargs["username"], kwargs["password"])
    mail_server.sendmail(kwargs["from"], kwargs["to"].split(COMMASPACE), msg.as_string())
    mail_server.quit()


def mail_report(output_file_path, **kwargs):
    """Mail the report"""
    num_lines = 0
    num_domains = 0
    with open(output_file_path, 'rbU') as output_file:
        for _ in output_file:
            num_lines += 1
            num_domains = num_lines - 1  # Ignore CSV header in count
    if num_domains > 0:
        kwargs["files"] = [output_file_path]
        kwargs["body"] = kwargs["new_results_body"]
        send_mail(**kwargs)


def main():
    """Called when the module is executed rather than imported"""
    parser = ArgumentParser(prog='domainaware',
                            description=__doc__)
    parser.add_argument('-c', '--config',
                        help='Directory location for required config files; defaults to the current working directory',
                        default=getcwd(),
                        required=False)
    parser.add_argument('-o', '--output', help='Path to output to; defaults to results.csv', default='results.csv',
                        required=False)
    parser.add_argument('-m', '--email', help='Email results upon completion; defaults to False', action="store_true",
                        default=False, required=False)

    args = parser.parse_args()

    if not path.isdir(args.config):
        print("ERROR! Specified configuration directory {} does not exist!".format(args.config), file=stderr)
        exit(-1)

    config_file_path = path.join(args.config, "settings.cfg")
    if not path.exists(config_file_path):
        print("ERROR! {} does not exist!".format(config_file_path), file=stderr)
        exit(-1)

    output_path = args.output
    my_domains_path = path.join(args.config, 'mydomains.csv')
    known_domains_path = path.join(args.config, 'knowndomains.csv')

    config = ConfigParser(allow_no_value=True)
    config.read([config_file_path])

    paths_config = dict(config.items("paths"))
    email_config = dict(config.items("email"))
    email_config["results_file"] = output_path
    dt_config = dict(config.items("domaintools"))

    last_domains_path = path.join(args.config, "last_domains")
    stale = False
    if path.exists(last_domains_path):
        with open(last_domains_path) as last_domains_file:
            last_domains = last_domains_file.readlines()
        with open(known_domains_path) as known_csv:
            csv_reader = DictReader(known_csv)
            known_domains = []
            for csv_row in csv_reader:
                known_domains.append(csv_row["Domain"])
            for domain in last_domains:
                if domain not in known_domains:
                    stale = True
                    break
    if stale:
        if args.email:
            email_config["body"] = email_config["stale_body"]
            send_mail(**email_config)
            print("ERROR! Domains from the last run have not been added to knowndomains.csv. Exiting...", file=stderr)
            exit(2)

    results = find_new_domains(paths_config, my_domains_path, known_domains_path, **dt_config)

    generate_output(results, args.config, output_path)

    if args.email:
        mail_report(args.output, **email_config)

if __name__ == "__main__":
    main()
